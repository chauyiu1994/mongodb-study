db.flightData.insertOne({
  departureAirport: "MUC",
  arrivalAirport: "SFO",
  aircraft: "Airbus A380",
  distance: 12000,
  intercontinental: true
});

db.flightData.find();

db.flightData.insert({
  departureAirport: "TXL",
  arrivalAirport: "LHR",
  _id: "txl-lhr-1"
});

db.flightData.deleteOne({ departureAirport: "TXL" });

db.flightData.find();

db.flightData.updateOne({ distance: 12000 }, { $set: { marker: "delete" } });

db.flightData.updateMany({}, { $set: { marker: "toDelete" } });

db.flightData.deleteMany({ marker: "toDelete" });
db.flightData.deleteMany({});

db.flightData.insertMany([
  {
    departureAirport: "MUC",
    arrivalAirport: "SFO",
    aircraft: "Airbus A380",
    distance: 12000,
    intercontinental: true
  },
  {
    departureAirport: "LHR",
    arrivalAirport: "TXL",
    aircraft: "Airbus A320",
    distance: 950,
    intercontinental: false
  }
]);

db.flightData.find({ intercontinental: true });

db.flightData.find({ distance: 12000 });

db.flightData.find({ distance: { $gt: 10000 } });

db.flightData.findOne({ distance: { $gt: 900 } });

db.flightData.updateOne(
  { _id: ObjectId("5e344a9491ec6015b35cadde") },
  { $set: { delay: true } }
);
db.flightData.updateOne(
  { _id: ObjectId("5e344a9491ec6015b35cadde") },
  { $set: { delay: false } }
);

// replace whole document
db.flightData.update(
  { _id: ObjectId("5e344a9491ec6015b35cadde") },
  { delay: false }
);

db.flightData.replaceOne(
  { _id: ObjectId("5e344a9491ec6015b35cadde") },
  {
    departureAirport: "MUC",
    arrivalAirport: "SFO",
    aircraft: "Airbus A380",
    distance: 12000,
    intercontinental: true
  }
);

db.passengers.insertMany([
  {
    name: "Max Schwarzmueller",
    age: 29
  },
  {
    name: "Manu Lorenz",
    age: 30
  },
  {
    name: "Chris Hayton",
    age: 35
  },
  {
    name: "Sandeep Kumar",
    age: 28
  },
  {
    name: "Maria Jones",
    age: 30
  },
  {
    name: "Alexandra Maier",
    age: 27
  },
  {
    name: "Dr. Phil Evans",
    age: 47
  },
  {
    name: "Sandra Brugge",
    age: 33
  },
  {
    name: "Elisabeth Mayr",
    age: 29
  },
  {
    name: "Frank Cube",
    age: 41
  },
  {
    name: "Karandeep Alun",
    age: 48
  },
  {
    name: "Michaela Drayer",
    age: 39
  },
  {
    name: "Bernd Hoftstadt",
    age: 22
  },
  {
    name: "Scott Tolib",
    age: 44
  },
  {
    name: "Freddy Melver",
    age: 41
  },
  {
    name: "Alexis Bohed",
    age: 35
  },
  {
    name: "Melanie Palace",
    age: 27
  },
  {
    name: "Armin Glutch",
    age: 35
  },
  {
    name: "Klaus Arber",
    age: 53
  },
  {
    name: "Albert Twostone",
    age: 68
  },
  {
    name: "Gordon Black",
    age: 38
  }
]);

// find does ot give all the data, a cursor instead
// pretty is a method that exist on cursor
db.passengers.find().toArray();
db.passengers.find().pretty();

// javascript syntax (also work on shell)
// db.passengers.find().forEach(passengerData => {
//   printjson(passengerData);
// });

// projection (only fetch name) (_id is included by default)
db.passengers.find({}, { name: 1, _id: 0 });

db.flightData.updateMany(
  {},
  {
    $set: {
      status: {
        description: "on-time",
        lastUpdated: "1 hour ago",
        details: { responsible: "Max" }
      }
    }
  }
);

db.passengers.updateOne(
  { name: "Albert Twostone" },
  { $set: { hobbies: ["sports", "cooking"] } }
);

// shell syntax
//db.passengers.findOne({name: "Albert Twostone"}).hobbies

// find where array array containes
db.passengers.find({hobbies: "sports"})

// find nested document (must be wrapped in double quotes)
db.flightData.find({"status.description": "on-time"})
db.flightData.find({"status.details.responsible": "Max"})